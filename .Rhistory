# Filter to maintain telomeric counts over a certain threshold
hap1_tel.table <- hap1_tel_count.table %>%
filter(Forward_Counts >= min_tel_count | Reverse_Counts >= min_tel_count)
hap2_tel.table <- hap2_tel_count.table %>%
filter(Forward_Counts >= min_tel_count | Reverse_Counts >= min_tel_count)
# Create the larger table necessary for plotting
hap1_plotting.table <- genome_table(hap1_length.table, hap1_tel.table, name = sample_name, genome_size = hap1_genome.size)
hap2_plotting.table <- genome_table(hap2_length.table, hap2_tel.table, name = sample_name, genome_size = hap2_genome.size)
# Assign haplotypes to individuals
hap1_plotting.table$Hap <- "hap1"
hap2_plotting.table$Hap <- "hap2"
diploid_plotting.table <- full_join(hap1_plotting.table, hap2_plotting.table)
# Remove leading 0s for proper ordering and plotting
diploid_plotting.table <- remove_lead_0s(diploid_plotting.table, chr_string = chr_names)
# Remove trailing strings. These are defined by a space
diploid_plotting.table <- remove_trailing(diploid_plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
diploid_plotting.table$Chromosome <- factor(diploid_plotting.table$Chromosome,
levels = unique(diploid_plotting.table$Chromosome)[order(as.numeric(gsub(chr_names, "", unique(diploid_plotting.table$Chromosome))))])
# Plot the ideogram
graphic <- ideogram_diploid(genome.table = diploid_plotting.table, plot_title = title_plot, x_axis_title = title_x_axis,
y_axis_title = title_y_axis, legend_title = title_legend, hap1_color = color_hap1,
hap2_color = color_hap2, hap1_name = name_hap1, hap2_name = name_hap2,
chr_size = size_chr, tel_color = color_tel, tel_shape = shape_tel,
y_scale = scale_y, y_scale_suffix = suffix_y_scale, legend_pos = pos_legend,
legend_size = size_legend, text_size = size_text)
return(list(genomic.table = diploid_plotting.table, ideogram = graphic))
}
}
dca1.hap <- ggideo_diploid("~/Desktop/alfalfa/Genomes/dca1_hap1_ragtag.fasta",
"~/Desktop/alfalfa/Genomes/dca1_hap2_ragtag.fasta",
color_hap1 = "mediumorchid1", color_hap2 = "mediumorchid3",
color_tel = "purple4")
#' # Example usage
#' # ggideo_diploid(path_hap1_fasta = "path/to/genome.fasta", path_hap2_fasta = "path/to/genome.fasta", sample_name = "Sample_1", title_plot = "Genome Ideogram")
#'
#' @importFrom Biostrings readDNAStringSet
#' @importFrom data.table data.table
#' @importFrom ggplot2 ggplot aes geom_segment geom_point labs theme element_text scale_y_continuous
#' @importFrom scales label_number
#' @importFrom dplyr filter mutate left_join select
#'
#' @export
ggideo_diploid <- function(path_hap1_fasta, path_hap2_fasta, combined_hap_fasta = NULL, chr_names = "Chr",
string_remove = "_RagTag", string_hap = "hap\\d+",tel_start_seq = "CCCTAAA", tel_end_seq = "TTTAGGG",
size_windows = 1e6, min_tel_count = 25, sample_name = NULL, title_plot = NULL,
title_x_axis = NULL, title_y_axis = "Chromosome Length", title_legend = "Telomere Size (bp)",
color_hap1 = "dodgerblue2", color_hap2 = "orangered", name_hap1 = "Haplotype 1",
name_hap2 = "Haplotype 2", size_chr = 6, color_tel = "black", shape_tel = 16,
scale_y = 1e-6, suffix_y_scale = "Mb", pos_legend = "bottom", size_legend = 0.25, size_text = 6){
if (!is.null(combined_hap_fasta)) {
# Read in combined fasta file
combined.genome <- readDNAStringSet("~/Desktop/alfalfa/Genomes/2261-1_combohap_ragtag.fasta")
# Create table of contigs, chromosomes, and lengths
combined_length.table <- data.table(Chromosome = names(combined.genome), Length = width(combined.genome))
# Filter for only chromosomes, based on starting string
combined_length.table <- select_chr(combined_length.table, chr_string = "Chr")
# Assign haplotypes to the table
combined_length.table <- parse_hap_combo(combined_length.table, hap_string =  "hap\\d+")
# Separate into tables by haplotype
hap_split.list <- split(combined_length.table, combined_length.table$Hap)
hap1_length.table <- hap_split.list[[1]]
hap2_length.table <- hap_split.list[[2]]
# Extract DNA reads for each haplotype
hap1.genome <- combined.genome[names(combined.genome) %in% hap1_length.table$Chromosome]
hap2.genome <- combined.genome[names(combined.genome) %in% hap2_length.table$Chromosome]
# Extract the size of the genome
hap1_genome.size <- sum(hap1_length.table$Length)
hap2_genome.size <- sum(hap2_length.table$Length)
# Count telomeric sequence repeat
hap1_tel_count.table <- telomere_repeat_number(fasta = hap1.genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
hap2_tel_count.table <- telomere_repeat_number(fasta = hap2.genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
# Filter to maintain telomeric counts over a certain threshold
hap1_tel.table <- hap1_tel_count.table %>%
filter(Forward_Counts >= min_tel_count | Reverse_Counts >= min_tel_count)
hap2_tel.table <- hap2_tel_count.table %>%
filter(Forward_Counts >= min_tel_count | Reverse_Counts >= min_tel_count)
# Create the larger table necessary for plotting
hap1_plotting.table <- genome_table(hap1_length.table, hap1_tel.table, name = sample_name, genome_size = hap1_genome.size)
hap2_plotting.table <- genome_table(hap2_length.table, hap2_tel.table, name = sample_name, genome_size = hap2_genome.size)
# Assign haplotypes to individuals
hap1_plotting.table$Hap <- "hap1"
hap2_plotting.table$Hap <- "hap2"
diploid_plotting.table <- full_join(hap1_plotting.table, hap2_plotting.table)
# Remove leading 0s for proper ordering and plotting
diploid_plotting.table <- remove_lead_0s(diploid_plotting.table, chr_string = chr_names)
# Remove trailing strings. These is defined by a space
diploid_plotting.table <- remove_trailing(diploid_plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
diploid_plotting.table$Chromosome <- factor(diploid_plotting.table$Chromosome,
levels = unique(diploid_plotting.table$Chromosome)[order(as.numeric(gsub(chr_names, "", unique(diploid_plotting.table$Chromosome))))])
# plot the ideogram
graphic <- ideogram_diploid(genome.table = diploid_plotting.table, plot_title = title_plot, x_axis_title = title_x_axis,
y_axis_title = title_y_axis, legend_title = title_legend, hap1_color = color_hap1,
hap2_color = color_hap2, hap1_name = name_hap1, hap2_name = name_hap2,
chr_size = size_chr, tel_color = color_tel, tel_shape = shape_tel,
y_scale = scale_y, y_scale_suffix = suffix_y_scale, legend_pos = pos_legend,
legend_size = size_legend, text_size = size_text)
return(list(genomic.table = diploid_plotting.table, ideogram = graphic))
} else {
# Read in fasta files
hap1.genome <- readDNAStringSet(path_hap1_fasta)
hap2.genome <- readDNAStringSet(path_hap2_fasta)
# Create table of contigs, chromosomes, and lengths
hap1_length.table <- data.table(Chromosome = names(hap1.genome), Length = width(hap1.genome))
hap2_length.table <- data.table(Chromosome = names(hap2.genome), Length = width(hap2.genome))
# Filter for only chromosomes, based on starting string
hap1_length.table <- select_chr(hap1_length.table, chr_string = chr_names)
hap2_length.table <- select_chr(hap2_length.table, chr_string = chr_names)
# Remove string from names
hap1_length.table$Chromosome <- remove_string_chr(hap1_length.table, remove_string = string_remove)
hap2_length.table$Chromosome <- remove_string_chr(hap2_length.table, remove_string = string_remove)
# Extract the size of the genome
hap1_genome.size <- sum(hap1_length.table$Length)
hap2_genome.size <- sum(hap2_length.table$Length)
# Count telomeric sequence repeat
hap1_tel_count.table <- telomere_repeat_number(fasta = hap1.genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
hap2_tel_count.table <- telomere_repeat_number(fasta = hap2.genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
# Filter to maintain telomeric counts over a certain threshold
hap1_tel.table <- hap1_tel_count.table %>%
filter(Forward_Counts >= min_tel_count | Reverse_Counts >= min_tel_count)
hap2_tel.table <- hap2_tel_count.table %>%
filter(Forward_Counts >= min_tel_count | Reverse_Counts >= min_tel_count)
# Create the larger table necessary for plotting
hap1_plotting.table <- genome_table(hap1_length.table, hap1_tel.table, name = sample_name, genome_size = hap1_genome.size)
hap2_plotting.table <- genome_table(hap2_length.table, hap2_tel.table, name = sample_name, genome_size = hap2_genome.size)
# Assign haplotypes to individuals
hap1_plotting.table$Hap <- "hap1"
hap2_plotting.table$Hap <- "hap2"
diploid_plotting.table <- full_join(hap1_plotting.table, hap2_plotting.table)
# Remove leading 0s for proper ordering and plotting
diploid_plotting.table <- remove_lead_0s(diploid_plotting.table, chr_string = chr_names)
# Remove trailing strings. These are defined by a space
diploid_plotting.table <- remove_trailing(diploid_plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
diploid_plotting.table$Chromosome <- factor(diploid_plotting.table$Chromosome,
levels = unique(diploid_plotting.table$Chromosome)[order(as.numeric(gsub(chr_names, "", unique(diploid_plotting.table$Chromosome))))])
# Plot the ideogram
graphic <- ideogram_diploid(genome.table = diploid_plotting.table, plot_title = title_plot, x_axis_title = title_x_axis,
y_axis_title = title_y_axis, legend_title = title_legend, hap1_color = color_hap1,
hap2_color = color_hap2, hap1_name = name_hap1, hap2_name = name_hap2,
chr_size = size_chr, tel_color = color_tel, tel_shape = shape_tel,
y_scale = scale_y, y_scale_suffix = suffix_y_scale, legend_pos = pos_legend,
legend_size = size_legend, text_size = size_text)
return(list(genomic.table = diploid_plotting.table, ideogram = graphic))
}
}
dca1.hap <- ggideo_diploid("~/Desktop/alfalfa/Genomes/dca1_hap1_ragtag.fasta",
"~/Desktop/alfalfa/Genomes/dca1_hap2_ragtag.fasta",
color_hap1 = "mediumorchid1", color_hap2 = "mediumorchid3",
color_tel = "purple4")
dca1.hap$ideogram
dca1.pri$ideogram
dca1.hap$ideogram
# Read in fasta files
hap1.genome <- readDNAStringSet("~/Desktop/alfalfa/Genomes/dca1_hap1_ragtag.fasta")
hap2.genome <- readDNAStringSet("~/Desktop/alfalfa/Genomes/dca1_hap2_ragtag.fasta")
# Create table of contigs, chromosomes, and lengths
hap1_length.table <- data.table(Chromosome = names(hap1.genome), Length = width(hap1.genome))
hap2_length.table <- data.table(Chromosome = names(hap2.genome), Length = width(hap2.genome))
hap2_length.table
# Filter for only chromosomes, based on starting string
hap1_length.table <- select_chr(hap1_length.table, chr_string = chr_names)
genome.table = diploid_plotting.table, plot_title = title_plot, x_axis_title = title_x_axis,
chr_names = "Chr",
chr_names = "Chr"
string_remove = "_RagTag"
string_hap = "hap\\d+"
tel_start_seq = "CCCTAAA"
tel_end_seq = "TTTAGGG"
size_windows = 1e6
min_tel_count = 25
sample_name = NULL
title_plot = NULL
title_x_axis = NULL
title_y_axis = "Chromosome Length"
title_legend = "Telomere Size (bp)"
color_hap1 = "dodgerblue2"
color_hap2 = "orangered"
name_hap1 = "Haplotype 1"
name_hap2 = "Haplotype 2"
size_chr = 6
color_tel = "black"
shape_tel = 16
scale_y = 1e-6
suffix_y_scale = "Mb"
pos_legend = "bottom"
size_legend = 0.25
size_text = 6
# Filter for only chromosomes, based on starting string
hap1_length.table <- select_chr(hap1_length.table, chr_string = chr_names)
hap1_length.table
hap2_length.table <- select_chr(hap2_length.table, chr_string = chr_names)
hap2_length.table
# Remove string from names
hap1_length.table$Chromosome <- remove_string_chr(hap1_length.table, remove_string = string_remove)
hap1_length.table$Chromosome
hap1_length.table
hap2_length.table$Chromosome <- remove_string_chr(hap2_length.table, remove_string = string_remove)
hap2_length.table
# Extract the size of the genome
hap1_genome.size <- sum(hap1_length.table$Length)
hap2_genome.size <- sum(hap2_length.table$Length)
# Count telomeric sequence repeat
hap1_tel_count.table <- telomere_repeat_number(fasta = hap1.genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
hap1_tel_count.table
# Read in fasta files
hap1.genome <- readDNAStringSet("~/Desktop/alfalfa/Genomes/dca1_hap1_ragtag.fasta")
hap2.genome <- readDNAStringSet("~/Desktop/alfalfa/Genomes/dca1_hap2_ragtag.fasta")
# Create table of contigs, chromosomes, and lengths
hap1_length.table <- data.table(Chromosome = names(hap1.genome), Length = width(hap1.genome))
hap2_length.table <- data.table(Chromosome = names(hap2.genome), Length = width(hap2.genome))
# Filter for only chromosomes, based on starting string
hap1_length.table <- select_chr(hap1_length.table, chr_string = chr_names)
hap2_length.table <- select_chr(hap2_length.table, chr_string = chr_names)
# Extract the size of the genome
hap1_genome.size <- sum(hap1_length.table$Length)
hap2_genome.size <- sum(hap2_length.table$Length)
# Count telomeric sequence repeat
hap1_tel_count.table <- telomere_repeat_number(fasta = hap1.genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
hap2_tel_count.table <- telomere_repeat_number(fasta = hap2.genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
# Filter to maintain telomeric counts over a certain threshold
hap1_tel.table <- hap1_tel_count.table %>%
filter(Forward_Counts >= min_tel_count | Reverse_Counts >= min_tel_count)
hap2_tel.table <- hap2_tel_count.table %>%
filter(Forward_Counts >= min_tel_count | Reverse_Counts >= min_tel_count)
# Create the larger table necessary for plotting
hap1_plotting.table <- genome_table(hap1_length.table, hap1_tel.table, name = sample_name, genome_size = hap1_genome.size)
hap2_plotting.table <- genome_table(hap2_length.table, hap2_tel.table, name = sample_name, genome_size = hap2_genome.size)
# Assign haplotypes to individuals
hap1_plotting.table$Hap <- "hap1"
hap2_plotting.table$Hap <- "hap2"
diploid_plotting.table <- full_join(hap1_plotting.table, hap2_plotting.table)
# Remove string from names
diploid_plotting.table$Chromosome <- remove_string_chr(diploid_plotting.table, remove_string = string_remove)
# Remove leading 0s for proper ordering and plotting
diploid_plotting.table <- remove_lead_0s(diploid_plotting.table, chr_string = chr_names)
# Remove trailing strings. These are defined by a space
diploid_plotting.table <- remove_trailing(diploid_plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
diploid_plotting.table$Chromosome <- factor(diploid_plotting.table$Chromosome,
levels = unique(diploid_plotting.table$Chromosome)[order(as.numeric(gsub(chr_names, "", unique(diploid_plotting.table$Chromosome))))])
# Plot the ideogram
graphic <- ideogram_diploid(genome.table = diploid_plotting.table, plot_title = title_plot, x_axis_title = title_x_axis,
y_axis_title = title_y_axis, legend_title = title_legend, hap1_color = color_hap1,
hap2_color = color_hap2, hap1_name = name_hap1, hap2_name = name_hap2,
chr_size = size_chr, tel_color = color_tel, tel_shape = shape_tel,
y_scale = scale_y, y_scale_suffix = suffix_y_scale, legend_pos = pos_legend,
legend_size = size_legend, text_size = size_text)
graphic
#' # Example usage
#' # ggideo_diploid(path_hap1_fasta = "path/to/genome.fasta", path_hap2_fasta = "path/to/genome.fasta", sample_name = "Sample_1", title_plot = "Genome Ideogram")
#'
#' @importFrom Biostrings readDNAStringSet
#' @importFrom data.table data.table
#' @importFrom ggplot2 ggplot aes geom_segment geom_point labs theme element_text scale_y_continuous
#' @importFrom scales label_number
#' @importFrom dplyr filter mutate left_join select
#'
#' @export
ggideo_diploid <- function(path_hap1_fasta, path_hap2_fasta, combined_hap_fasta = NULL, chr_names = "Chr",
string_remove = "_RagTag", string_hap = "hap\\d+",tel_start_seq = "CCCTAAA", tel_end_seq = "TTTAGGG",
size_windows = 1e6, min_tel_count = 25, sample_name = NULL, title_plot = NULL,
title_x_axis = NULL, title_y_axis = "Chromosome Length", title_legend = "Telomere Size (bp)",
color_hap1 = "dodgerblue2", color_hap2 = "orangered", name_hap1 = "Haplotype 1",
name_hap2 = "Haplotype 2", size_chr = 6, color_tel = "black", shape_tel = 16,
scale_y = 1e-6, suffix_y_scale = "Mb", pos_legend = "bottom", size_legend = 0.25, size_text = 6){
if (!is.null(combined_hap_fasta)) {
# Read in combined fasta file
combined.genome <- readDNAStringSet("~/Desktop/alfalfa/Genomes/2261-1_combohap_ragtag.fasta")
# Create table of contigs, chromosomes, and lengths
combined_length.table <- data.table(Chromosome = names(combined.genome), Length = width(combined.genome))
# Filter for only chromosomes, based on starting string
combined_length.table <- select_chr(combined_length.table, chr_string = "Chr")
# Assign haplotypes to the table
combined_length.table <- parse_hap_combo(combined_length.table, hap_string =  "hap\\d+")
# Separate into tables by haplotype
hap_split.list <- split(combined_length.table, combined_length.table$Hap)
hap1_length.table <- hap_split.list[[1]]
hap2_length.table <- hap_split.list[[2]]
# Extract DNA reads for each haplotype
hap1.genome <- combined.genome[names(combined.genome) %in% hap1_length.table$Chromosome]
hap2.genome <- combined.genome[names(combined.genome) %in% hap2_length.table$Chromosome]
# Extract the size of the genome
hap1_genome.size <- sum(hap1_length.table$Length)
hap2_genome.size <- sum(hap2_length.table$Length)
# Count telomeric sequence repeat
hap1_tel_count.table <- telomere_repeat_number(fasta = hap1.genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
hap2_tel_count.table <- telomere_repeat_number(fasta = hap2.genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
# Filter to maintain telomeric counts over a certain threshold
hap1_tel.table <- hap1_tel_count.table %>%
filter(Forward_Counts >= min_tel_count | Reverse_Counts >= min_tel_count)
hap2_tel.table <- hap2_tel_count.table %>%
filter(Forward_Counts >= min_tel_count | Reverse_Counts >= min_tel_count)
# Create the larger table necessary for plotting
hap1_plotting.table <- genome_table(hap1_length.table, hap1_tel.table, name = sample_name, genome_size = hap1_genome.size)
hap2_plotting.table <- genome_table(hap2_length.table, hap2_tel.table, name = sample_name, genome_size = hap2_genome.size)
# Assign haplotypes to individuals
hap1_plotting.table$Hap <- "hap1"
hap2_plotting.table$Hap <- "hap2"
diploid_plotting.table <- full_join(hap1_plotting.table, hap2_plotting.table)
# Remove leading 0s for proper ordering and plotting
diploid_plotting.table <- remove_lead_0s(diploid_plotting.table, chr_string = chr_names)
# Remove trailing strings. These is defined by a space
diploid_plotting.table <- remove_trailing(diploid_plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
diploid_plotting.table$Chromosome <- factor(diploid_plotting.table$Chromosome,
levels = unique(diploid_plotting.table$Chromosome)[order(as.numeric(gsub(chr_names, "", unique(diploid_plotting.table$Chromosome))))])
# plot the ideogram
graphic <- ideogram_diploid(genome.table = diploid_plotting.table, plot_title = title_plot, x_axis_title = title_x_axis,
y_axis_title = title_y_axis, legend_title = title_legend, hap1_color = color_hap1,
hap2_color = color_hap2, hap1_name = name_hap1, hap2_name = name_hap2,
chr_size = size_chr, tel_color = color_tel, tel_shape = shape_tel,
y_scale = scale_y, y_scale_suffix = suffix_y_scale, legend_pos = pos_legend,
legend_size = size_legend, text_size = size_text)
return(list(genomic.table = diploid_plotting.table, ideogram = graphic))
} else {
# Read in fasta files
hap1.genome <- readDNAStringSet(path_hap1_fasta)
hap2.genome <- readDNAStringSet(path_hap2_fasta)
# Create table of contigs, chromosomes, and lengths
hap1_length.table <- data.table(Chromosome = names(hap1.genome), Length = width(hap1.genome))
hap2_length.table <- data.table(Chromosome = names(hap2.genome), Length = width(hap2.genome))
# Filter for only chromosomes, based on starting string
hap1_length.table <- select_chr(hap1_length.table, chr_string = chr_names)
hap2_length.table <- select_chr(hap2_length.table, chr_string = chr_names)
# Extract the size of the genome
hap1_genome.size <- sum(hap1_length.table$Length)
hap2_genome.size <- sum(hap2_length.table$Length)
# Count telomeric sequence repeat
hap1_tel_count.table <- telomere_repeat_number(fasta = hap1.genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
hap2_tel_count.table <- telomere_repeat_number(fasta = hap2.genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
# Filter to maintain telomeric counts over a certain threshold
hap1_tel.table <- hap1_tel_count.table %>%
filter(Forward_Counts >= min_tel_count | Reverse_Counts >= min_tel_count)
hap2_tel.table <- hap2_tel_count.table %>%
filter(Forward_Counts >= min_tel_count | Reverse_Counts >= min_tel_count)
# Create the larger table necessary for plotting
hap1_plotting.table <- genome_table(hap1_length.table, hap1_tel.table, name = sample_name, genome_size = hap1_genome.size)
hap2_plotting.table <- genome_table(hap2_length.table, hap2_tel.table, name = sample_name, genome_size = hap2_genome.size)
# Assign haplotypes to individuals
hap1_plotting.table$Hap <- "hap1"
hap2_plotting.table$Hap <- "hap2"
diploid_plotting.table <- full_join(hap1_plotting.table, hap2_plotting.table)
# Remove string from names
diploid_plotting.table$Chromosome <- remove_string_chr(diploid_plotting.table, remove_string = string_remove)
# Remove leading 0s for proper ordering and plotting
diploid_plotting.table <- remove_lead_0s(diploid_plotting.table, chr_string = chr_names)
# Remove trailing strings. These are defined by a space
diploid_plotting.table <- remove_trailing(diploid_plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
diploid_plotting.table$Chromosome <- factor(diploid_plotting.table$Chromosome,
levels = unique(diploid_plotting.table$Chromosome)[order(as.numeric(gsub(chr_names, "", unique(diploid_plotting.table$Chromosome))))])
# Plot the ideogram
graphic <- ideogram_diploid(genome.table = diploid_plotting.table, plot_title = title_plot, x_axis_title = title_x_axis,
y_axis_title = title_y_axis, legend_title = title_legend, hap1_color = color_hap1,
hap2_color = color_hap2, hap1_name = name_hap1, hap2_name = name_hap2,
chr_size = size_chr, tel_color = color_tel, tel_shape = shape_tel,
y_scale = scale_y, y_scale_suffix = suffix_y_scale, legend_pos = pos_legend,
legend_size = size_legend, text_size = size_text)
return(list(genomic.table = diploid_plotting.table, ideogram = graphic))
}
}
dca1.hap <- ggideo_diploid("~/Desktop/alfalfa/Genomes/dca1_hap1_ragtag.fasta",
"~/Desktop/alfalfa/Genomes/dca1_hap2_ragtag.fasta",
color_hap1 = "mediumorchid1", color_hap2 = "mediumorchid3",
color_tel = "purple4")
dca1.hap$ideogram
#' # Example usage
#' # ggideo_diploid(path_hap1_fasta = "path/to/genome.fasta", path_hap2_fasta = "path/to/genome.fasta", sample_name = "Sample_1", title_plot = "Genome Ideogram")
#'
#' @importFrom Biostrings readDNAStringSet
#' @importFrom data.table data.table
#' @importFrom ggplot2 ggplot aes geom_segment geom_point labs theme element_text scale_y_continuous
#' @importFrom scales label_number
#' @importFrom dplyr filter mutate left_join select
#'
#' @export
ggideo_diploid <- function(path_hap1_fasta, path_hap2_fasta, combined_hap_fasta = NULL, chr_names = "Chr",
string_remove = "_RagTag", string_hap = "hap\\d+",tel_start_seq = "CCCTAAA", tel_end_seq = "TTTAGGG",
size_windows = 1e6, min_tel_count = 25, sample_name = NULL, title_plot = NULL,
title_x_axis = NULL, title_y_axis = "Chromosome Length", title_legend = "Telomere Size (bp)",
color_hap1 = "dodgerblue2", color_hap2 = "orangered", name_hap1 = "Haplotype 1",
name_hap2 = "Haplotype 2", size_chr = 6, color_tel = "black", shape_tel = 16,
scale_y = 1e-6, suffix_y_scale = "Mb", pos_legend = "bottom", size_legend = 0.25, size_text = 6){
if (!is.null(combined_hap_fasta)) {
# Read in combined fasta file
combined.genome <- readDNAStringSet("~/Desktop/alfalfa/Genomes/2261-1_combohap_ragtag.fasta")
# Create table of contigs, chromosomes, and lengths
combined_length.table <- data.table(Chromosome = names(combined.genome), Length = width(combined.genome))
# Filter for only chromosomes, based on starting string
combined_length.table <- select_chr(combined_length.table, chr_string = "Chr")
# Assign haplotypes to the table
combined_length.table <- parse_hap_combo(combined_length.table, hap_string =  "hap\\d+")
# Separate into tables by haplotype
hap_split.list <- split(combined_length.table, combined_length.table$Hap)
hap1_length.table <- hap_split.list[[1]]
hap2_length.table <- hap_split.list[[2]]
# Extract DNA reads for each haplotype
hap1.genome <- combined.genome[names(combined.genome) %in% hap1_length.table$Chromosome]
hap2.genome <- combined.genome[names(combined.genome) %in% hap2_length.table$Chromosome]
# Extract the size of the genome
hap1_genome.size <- sum(hap1_length.table$Length)
hap2_genome.size <- sum(hap2_length.table$Length)
# Count telomeric sequence repeat
hap1_tel_count.table <- telomere_repeat_number(fasta = hap1.genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
hap2_tel_count.table <- telomere_repeat_number(fasta = hap2.genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
# Filter to maintain telomeric counts over a certain threshold
hap1_tel.table <- hap1_tel_count.table %>%
filter(Forward_Counts >= min_tel_count | Reverse_Counts >= min_tel_count)
hap2_tel.table <- hap2_tel_count.table %>%
filter(Forward_Counts >= min_tel_count | Reverse_Counts >= min_tel_count)
# Create the larger table necessary for plotting
hap1_plotting.table <- genome_table(hap1_length.table, hap1_tel.table, name = sample_name, genome_size = hap1_genome.size)
hap2_plotting.table <- genome_table(hap2_length.table, hap2_tel.table, name = sample_name, genome_size = hap2_genome.size)
# Assign haplotypes to individuals
hap1_plotting.table$Hap <- "hap1"
hap2_plotting.table$Hap <- "hap2"
diploid_plotting.table <- full_join(hap1_plotting.table, hap2_plotting.table)
# Remove string from names
diploid_plotting.table$Chromosome <- remove_string_chr(diploid_plotting.table, remove_string = string_remove)
# Remove leading 0s for proper ordering and plotting
diploid_plotting.table <- remove_lead_0s(diploid_plotting.table, chr_string = chr_names)
# Remove trailing strings. These are defined by a space
diploid_plotting.table <- remove_trailing(diploid_plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
diploid_plotting.table$Chromosome <- factor(diploid_plotting.table$Chromosome,
levels = unique(diploid_plotting.table$Chromosome)[order(as.numeric(gsub(chr_names, "", unique(diploid_plotting.table$Chromosome))))])
# plot the ideogram
graphic <- ideogram_diploid(genome.table = diploid_plotting.table, plot_title = title_plot, x_axis_title = title_x_axis,
y_axis_title = title_y_axis, legend_title = title_legend, hap1_color = color_hap1,
hap2_color = color_hap2, hap1_name = name_hap1, hap2_name = name_hap2,
chr_size = size_chr, tel_color = color_tel, tel_shape = shape_tel,
y_scale = scale_y, y_scale_suffix = suffix_y_scale, legend_pos = pos_legend,
legend_size = size_legend, text_size = size_text)
return(list(genomic.table = diploid_plotting.table, ideogram = graphic))
} else {
# Read in fasta files
hap1.genome <- readDNAStringSet(path_hap1_fasta)
hap2.genome <- readDNAStringSet(path_hap2_fasta)
# Create table of contigs, chromosomes, and lengths
hap1_length.table <- data.table(Chromosome = names(hap1.genome), Length = width(hap1.genome))
hap2_length.table <- data.table(Chromosome = names(hap2.genome), Length = width(hap2.genome))
# Filter for only chromosomes, based on starting string
hap1_length.table <- select_chr(hap1_length.table, chr_string = chr_names)
hap2_length.table <- select_chr(hap2_length.table, chr_string = chr_names)
# Extract the size of the genome
hap1_genome.size <- sum(hap1_length.table$Length)
hap2_genome.size <- sum(hap2_length.table$Length)
# Count telomeric sequence repeat
hap1_tel_count.table <- telomere_repeat_number(fasta = hap1.genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
hap2_tel_count.table <- telomere_repeat_number(fasta = hap2.genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
# Filter to maintain telomeric counts over a certain threshold
hap1_tel.table <- hap1_tel_count.table %>%
filter(Forward_Counts >= min_tel_count | Reverse_Counts >= min_tel_count)
hap2_tel.table <- hap2_tel_count.table %>%
filter(Forward_Counts >= min_tel_count | Reverse_Counts >= min_tel_count)
# Create the larger table necessary for plotting
hap1_plotting.table <- genome_table(hap1_length.table, hap1_tel.table, name = sample_name, genome_size = hap1_genome.size)
hap2_plotting.table <- genome_table(hap2_length.table, hap2_tel.table, name = sample_name, genome_size = hap2_genome.size)
# Assign haplotypes to individuals
hap1_plotting.table$Hap <- "hap1"
hap2_plotting.table$Hap <- "hap2"
diploid_plotting.table <- full_join(hap1_plotting.table, hap2_plotting.table)
# Remove string from names
diploid_plotting.table$Chromosome <- remove_string_chr(diploid_plotting.table, remove_string = string_remove)
# Remove leading 0s for proper ordering and plotting
diploid_plotting.table <- remove_lead_0s(diploid_plotting.table, chr_string = chr_names)
# Remove trailing strings. These are defined by a space
diploid_plotting.table <- remove_trailing(diploid_plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
diploid_plotting.table$Chromosome <- factor(diploid_plotting.table$Chromosome,
levels = unique(diploid_plotting.table$Chromosome)[order(as.numeric(gsub(chr_names, "", unique(diploid_plotting.table$Chromosome))))])
# Plot the ideogram
graphic <- ideogram_diploid(genome.table = diploid_plotting.table, plot_title = title_plot, x_axis_title = title_x_axis,
y_axis_title = title_y_axis, legend_title = title_legend, hap1_color = color_hap1,
hap2_color = color_hap2, hap1_name = name_hap1, hap2_name = name_hap2,
chr_size = size_chr, tel_color = color_tel, tel_shape = shape_tel,
y_scale = scale_y, y_scale_suffix = suffix_y_scale, legend_pos = pos_legend,
legend_size = size_legend, text_size = size_text)
return(list(genomic.table = diploid_plotting.table, ideogram = graphic))
}
}
ggideo_diploid("~/Desktop/alfalfa/Genomes/dca1_hap1_ragtag.fasta",
"~/Desktop/alfalfa/Genomes/dca1_hap2_ragtag.fasta",
color_hap1 = "mediumorchid1", color_hap2 = "mediumorchid3",
color_tel = "purple4")
ggideo_diploid(combined_hap_fasta = "~/Desktop/alfalfa/Genomes/2261-1_combohap_ragtag.fasta") # Worked well
ggideo_diploid(combined_hap_fasta = "~/Desktop/alfalfa/Genomes/2261-1_combohap_ragtag.fasta", string_remove = "hap//d_RagTag") # Worked well
ggideo_diploid(combined_hap_fasta = "~/Desktop/alfalfa/Genomes/2261-1_combohap_ragtag.fasta", string_remove = "hap\\d_RagTag") # Worked well
ggideo_diploid("~/Desktop/alfalfa/Genomes/dca1_hap1_ragtag.fasta",
"~/Desktop/alfalfa/Genomes/dca1_hap2_ragtag.fasta",
color_hap1 = "mediumorchid1", color_hap2 = "mediumorchid3",
color_tel = "purple4")
ggideo_diploid(combined_hap_fasta = "~/Desktop/alfalfa/Genomes/2261-1_combohap_ragtag.fasta", string_remove = "_hap\\d_RagTag") # Worked well
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
devtools::install_github("matthewwdavis/ggnomics")
library(ggnomics)
# Set chr_names to NULL
# Load the fasta object separately so that the fasta file doesn't need to be loaded every time
# modify plot for NA values
dca1.pri <- ggideo("~/Desktop/alfalfa/Genomes/dca1_primary_ragtag.fasta", chr_names = "Chr",
color_chr = "mediumpurple1", color_tel = "darkorchid")
roxygen2::roxygenise()
`rm(list = c("count_sequence", "create_windows", "genome_table", "ggideo", "ggideo_diploid", "ideogram", "ideogram_diploid", "parse_hap_combo", "remove_lead_0s", "remove_string_chr", "remove_trailing", "select_chr",
"telomere_repeat_number"))`
rm(list = c("count_sequence", "create_windows", "genome_table", "ggideo", "ggideo_diploid", "ideogram", "ideogram_diploid", "parse_hap_combo", "remove_lead_0s", "remove_string_chr", "remove_trailing", "select_chr",
"telomere_repeat_number"))
roxygen2::roxygenise()
devtools::document()
