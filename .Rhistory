geom_segment(aes(xend = Chromosome, y = begin_telo_start, yend = Length),
color = chr_color,
linewidth = chr_size,
lineend = "round"),
geom_point(aes(x = Chromosome, y = begin_telo_end, size = ifelse(begin_telo_bp == 0, NA, begin_telo_bp)),
shape = tel_shape,
color = tel_color),
geom_point(aes(x = Chromosome, y = end_telo_end, size = ifelse(end_telo_bp == 0, NA, end_telo_bp)),
shape = tel_shape,
color = tel_color),
scale_y_continuous(labels = label_number(scale = y_scale, suffix = y_scale_suffix)),
labs(y = y_axis_title, x = x_axis_title, size = legend_title, title = plot_title),
theme_classic(base_size = text_size) +
theme(legend.position = legend_pos,
legend.key.size = unit(legend_size, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold"))
)
}
ggnom(test_genome, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(
plot_title = "Chromosome Ideogram",
x_axis_title = "Chromosomes"
) +
theme_light
ggnom(test_genome, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(
plot_title = "Chromosome Ideogram",
x_axis_title = "Chromosomes"
) +
theme_light()
ggnom(test_genome, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(
plot_title = "Chromosome Ideogram",
x_axis_title = "Chromosomes"
) +
theme_linedraw()
ggnom(test_genome, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(
plot_title = "Chromosome Ideogram",
x_axis_title = "Chromosomes"
) +
theme_bw()
ggnom(test_genome, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(
plot_title = "Chromosome Ideogram",
x_axis_title = "Chromosomes"
)
# Initialize ggnom
ggnom <- function(data, mapping = NULL, ...) {
ggplot(data = data, mapping = mapping, ...)
}
# Define geom_telplot as a custom ggplot2 layer
geom_telplot <- function(chr_color = "#F8766D", chr_size = 6,
tel_color = "black", tel_shape = 16,
y_scale = 1e-6, legend_title = "Telomere Size (bp)",
text_size = 6, plot_title = NULL, x_axis_title = NULL,
y_axis_title = "Chromosome Length") {
list(
geom_segment(aes(xend = Chromosome, y = begin_telo_start, yend = Length),
color = chr_color,
linewidth = chr_size,
lineend = "round"),
geom_point(aes(x = Chromosome, y = begin_telo_end, size = ifelse(begin_telo_bp == 0, NA, begin_telo_bp)),
shape = tel_shape,
color = tel_color,
na.rm = TRUE),
geom_point(aes(x = Chromosome, y = end_telo_end, size = ifelse(end_telo_bp == 0, NA, end_telo_bp)),
shape = tel_shape,
color = tel_color,
na.rm = TRUE),
scale_y_continuous(labels = label_number(scale = y_scale, suffix = y_scale_suffix)),
labs(y = y_axis_title, x = x_axis_title, size = legend_title, title = plot_title),
theme_classic(base_size = text_size) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
)
}
ggnom(test_genome, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(
plot_title = "Chromosome Ideogram",
x_axis_title = "Chromosomes"
)
# Define geom_telplot as a custom ggplot2 layer
geom_telplot <- function(chr_color = "#F8766D", chr_size = 6,
tel_color = "black", tel_shape = 16,
y_scale = 1e-6, legend_title = "Telomere Size (bp)",
text_size = 6, plot_title = NULL, x_axis_title = NULL,
y_axis_title = "Chromosome Length") {
list(
geom_segment(aes(xend = Chromosome, y = begin_telo_start, yend = Length),
color = chr_color,
linewidth = chr_size,
lineend = "round"),
geom_point(aes(x = Chromosome, y = begin_telo_end, size = ifelse(begin_telo_bp == 0, NA, begin_telo_bp)),
shape = tel_shape,
color = tel_color,
na.rm = TRUE),
geom_point(aes(x = Chromosome, y = end_telo_end, size = ifelse(end_telo_bp == 0, NA, end_telo_bp)),
shape = tel_shape,
color = tel_color,
na.rm = TRUE),
labs(y = y_axis_title, x = x_axis_title, size = legend_title, title = plot_title),
theme_classic(base_size = text_size) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
)
}
ggnom(test_genome, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(
plot_title = "Chromosome Ideogram",
x_axis_title = "Chromosomes"
)
# Define geom_telplot as a custom ggplot2 layer
geom_telplot <- function(chr_color = "#F8766D", chr_size = 6,
tel_color = "black", tel_shape = 16,
y_scale = 1e-6, legend_title = "Telomere Size (bp)",
text_size = 6, plot_title = NULL, x_axis_title = NULL,
y_axis_title = "Chromosome Length") {
list(
geom_segment(aes(xend = Chromosome, y = begin_telo_start, yend = Length),
color = chr_color,
linewidth = chr_size,
lineend = "round"),
geom_point(aes(x = Chromosome, y = begin_telo_end, size = ifelse(begin_telo_bp == 0, NA, begin_telo_bp)),
shape = tel_shape,
color = tel_color,
na.rm = TRUE),
geom_point(aes(x = Chromosome, y = end_telo_end, size = ifelse(end_telo_bp == 0, NA, end_telo_bp)),
shape = tel_shape,
color = tel_color,
na.rm = TRUE),
labs(y = y_axis_title, x = x_axis_title, size = legend_title, title = plot_title),
theme_classic(base_size = text_size) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
)
}
ggnom(test_genome, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(
)
ggnom(test_genome, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(
) +
theme(legend.position = "bottom")
ggnom(test_genome, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(
) +
theme(legend.position = c(.2,.8), "cm")
ggnom(test_genome, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(
) +
theme(legend.position = c(.8,.7), "cm")
# Define geom_telplot as a custom ggplot2 layer
geom_telplot <- function(chr_color = "#F8766D", chr_size = 6,
tel_color = "black", tel_shape = 16,
legend_title = "Telomere Size (bp)",
text_size = 6, plot_title = NULL, x_axis_title = NULL,
y_axis_title = "Chromosome Length") {
list(
geom_segment(aes(xend = Chromosome, y = begin_telo_start, yend = Length),
color = chr_color,
linewidth = chr_size,
lineend = "round"),
geom_point(aes(x = Chromosome, y = begin_telo_end, size = ifelse(begin_telo_bp == 0, NA, begin_telo_bp)),
shape = tel_shape,
color = tel_color,
na.rm = TRUE),
geom_point(aes(x = Chromosome, y = end_telo_end, size = ifelse(end_telo_bp == 0, NA, end_telo_bp)),
shape = tel_shape,
color = tel_color,
na.rm = TRUE),
labs(y = y_axis_title, x = x_axis_title, size = legend_title, title = plot_title),
theme_classic(base_size = text_size) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
)
}
ggnom(test_genome, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot()
## Load scripts for testing
# Define the folder path
folder_path <- "~/Projects/ggnomics/R/"
# Get all R scripts in the directory
scripts <- list.files(folder_path, pattern = "\\.R$", full.names = TRUE)
# Source each script
lapply(scripts, source)
## Test new structure
strep <- ggread_fasta("~/Projects/Streptanthus/Genome_Assembly/Inputs/Assemblies/S.div_Chr_Ordered.fasta")
library(data.table)
library(tidyverse)
library(scales)
library(Biostrings)
library(pbapply)
## Load scripts for testing
# Define the folder path
folder_path <- "~/Projects/ggnomics/R/"
# Get all R scripts in the directory
scripts <- list.files(folder_path, pattern = "\\.R$", full.names = TRUE)
# Source each script
lapply(scripts, source)
## Test new structure
strep <- ggread_fasta("~/Projects/Streptanthus/Genome_Assembly/Inputs/Assemblies/S.div_Chr_Ordered.fasta")
test_genome <- telomere_data(strep)
ggnom(test_genome, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot()
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
devtools::install_github("matthewwdavis/ggnomics")
library(ggnomics)
## Test new structure
strep <- ggread_fasta("~/Projects/Streptanthus/Genome_Assembly/Inputs/Assemblies/S.div_Chr_Ordered.fasta")
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
roxygen2::roxygenise()
devtools::document()
roxygen2::roxygenise()
devtools::document()
source("~/Desktop/testing_ggnomics.R", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
rmarkdown::render("README.Rmd", output_format = "github_document")
install.packages(c("data.table", "tidyverse", "scales", "pbapply"))
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("Biostrings")
knitr::opts_chunk$set(echo = TRUE)
install.packages(c("data.table", "tidyverse", "scales", "pbapply"))
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("Biostrings")
rmarkdown::render("README.Rmd", output_format = "github_document")
rmarkdown::render("README.Rmd", output_format = "github_document")
install.packages(c("data.table", "tidyverse", "scales", "pbapply"))
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("Biostrings")
install.packages(c("data.table", "tidyverse", "scales", "pbapply"))
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("Biostrings")
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
devtools::install_github("matthewwdavis/ggnomics")
library(ggnomics)
# Generate the data and the plot, stored as a list
genome.plot <- ggideo("path/to/fasta/file")
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
rmarkdown::render("README.Rmd", output_format = "github_document")
rmarkdown::render("README.Rmd", output_format = "github_document")
download.file("https://ftp.ensemblgenomes.ebi.ac.uk/pub/plants/release-60/fasta/arabidopsis_thaliana/dna/Arabidopsis_thaliana.TAIR10.dna.toplevel.fa.gz", destfile = "./arabidopsis_tair10.fasta.gz", mode = "wb")
devtools::install_github("matthewwdavis/ggnomics")
library(ggnomics)
## Test new structure
strep <- ggread_fasta("~/Projects/Streptanthus/Genome_Assembly/Inputs/Assemblies/S.div_Chr_Ordered.fasta")
test_genome <- telomere_data(strep)
ggnom(test_genome, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot()
ggideo("./arabidopsis_tair10.fasta.gz")
ggideo("./arabidopsis_tair10.fasta.gz", chr_names = "\\d")
## Test new structure
genome <- ggread_fasta("./arabidopsis_tair10.fasta.gz")
tel_data <- telomere_data(genome, chr_names = "\\d")
genome
tel_data
## Test new structure
genome <- ggread_fasta("./arabidopsis_tair10.fasta.gz")
## Test new structure
genome <- ggread_fasta("./arabidopsis_tair10.fasta.gz")
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
length.table
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
chr_names = "\\d"
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome)
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(Forward_Counts >= 25 | Reverse_Counts >= 25)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = sample_name, genome_size = genome.size)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table,genome_size = genome.size)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = NULL, genome_size = genome.size)
# Remove string from names
plotting.table$Chromosome <- remove_string_chr(plotting.table, remove_string = string_remove)
# Remove string from names
plotting.table$Chromosome <- remove_string_chr(plotting.table, remove_string = "_RagTag")
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table, chr_string = chr_names)
# Remove trailing strings. These is defined by a space
plotting.table <- remove_trailing(plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[order(as.numeric(gsub(chr_names, "", unique(plotting.table$Chromosome))))])
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome)
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(Forward_Counts >= 25 | Reverse_Counts >= 25)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = NULL, genome_size = genome.size)
# Remove string from names
plotting.table$Chromosome <- remove_string_chr(plotting.table, remove_string = "_RagTag")
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table, chr_string = chr_names)
# Remove trailing strings. These is defined by a space
plotting.table <- remove_trailing(plotting.table)
gsub(chr_names, "", unique(plotting.table$Chromosome))
plotting.table
unique(plotting.table$Chromosome)
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[
order(as.numeric(
ifelse(nchar(unique(plotting.table$Chromosome)) > 1,
gsub(chr_names, "", unique(plotting.table$Chromosome)),
unique(plotting.table$Chromosome))
))
])
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome)
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(Forward_Counts >= 25 | Reverse_Counts >= 25)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = NULL, genome_size = genome.size)
# Remove string from names
plotting.table$Chromosome <- remove_string_chr(plotting.table, remove_string = "_RagTag")
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table, chr_string = chr_names)
# Remove trailing strings. These is defined by a space
plotting.table <- remove_trailing(plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[
order(as.numeric(
ifelse(nchar(unique(plotting.table$Chromosome)) > 1,
gsub(chr_names, "", unique(plotting.table$Chromosome)),
unique(plotting.table$Chromosome))
))
])
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome)
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(Forward_Counts >= 25 | Reverse_Counts >= 25)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = NULL, genome_size = genome.size)
# Remove string from names
plotting.table$Chromosome <- remove_string_chr(plotting.table, remove_string = "_RagTag")
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table, chr_string = chr_names)
# Remove trailing strings. These is defined by a space
plotting.table <- remove_trailing(plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[
order(as.numeric(gsub("^(\\d{2})(.*)", "\\1",
unique(plotting.table$Chromosome))))
])
# Set levels so that chromosomes are plotted in the proper order by number
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[
order(as.numeric(sapply(unique(plotting.table$Chromosome), function(x) {
if (grepl("^\\d+$", x)) {
return(x)  # Leave numeric chromosomes as is
} else {
return(gsub(" .*", "", x))  # Apply gsub to non-numeric chromosomes
}
})))
])
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome)
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(Forward_Counts >= 25 | Reverse_Counts >= 25)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = NULL, genome_size = genome.size)
# Remove string from names
plotting.table$Chromosome <- remove_string_chr(plotting.table, remove_string = "_RagTag")
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table, chr_string = chr_names)
# Remove trailing strings. These is defined by a space
plotting.table <- remove_trailing(plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[order(as.numeric(gsub(chr_names, "", unique(plotting.table$Chromosome))))])
# Set levels so that chromosomes are plotted in the proper order by number
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[
order(as.numeric(sapply(unique(plotting.table$Chromosome), function(x) {
if (grepl("^\\d+$", x)) {
return(x)  # Leave numeric chromosomes as is
} else {
return(gsub(" .*", "", x))  # Apply gsub to non-numeric chromosomes
}
})))
])
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome)
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(Forward_Counts >= 25 | Reverse_Counts >= 25)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = NULL, genome_size = genome.size)
# Remove string from names
plotting.table$Chromosome <- remove_string_chr(plotting.table, remove_string = "_RagTag")
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table, chr_string = chr_names)
# Remove trailing strings. These is defined by a space
plotting.table <- remove_trailing(plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[order(as.numeric(gsub(chr_names, "", unique(plotting.table$Chromosome))))])
# Set levels so that chromosomes are plotted in the proper order by number
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[
order(sapply(unique(plotting.table$Chromosome), function(x) {
# If the chromosome value is purely numeric, keep it as is
if (grepl("^\\d+$", x)) {
return(as.numeric(x))  # Convert numeric strings to numbers
} else {
# For non-numeric chromosomes, remove everything after the space
return(as.character(gsub(" .*", "", x)))
}
}))
])
plotting.table
telomere_plotting_table <- function(genome, chr_names = "Chr", string_remove = "_RagTag", tel_start_seq = "CCCTAAA", tel_end_seq = "TTTAGGG",
size_windows = 1e6, min_tel_count = 25, sample_name = NULL){
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(Forward_Counts >= min_tel_count | Reverse_Counts >= min_tel_count)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = sample_name, genome_size = genome.size)
# Remove string from names
plotting.table$Chromosome <- remove_string_chr(plotting.table, remove_string = string_remove)
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table, chr_string = chr_names)
# Remove trailing strings. These is defined by a space
plotting.table <- remove_trailing(plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[
order(sapply(unique(plotting.table$Chromosome), function(x) {
# If the chromosome value is purely numeric, keep it as is
if (grepl("^\\d+$", x)) {
return(as.numeric(x))  # Convert numeric strings to numbers
} else {
# For non-numeric chromosomes, remove everything after the space
return(as.character(gsub(" .*", "", x)))
}
}))
])
return(plotting.table)
}
genome <- ggread_fasta("./arabidopsis_tair10.fasta.gz")
tel_data <- telomere_plotting_table(genome, chr_names = "\\d")
ggnom(tel_data, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot()
ggideo("./arabidopsis_tair10.fasta.gz", chr_names = "\\d")
