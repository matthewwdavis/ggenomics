plotting.table <- remove_lead_0s(plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[order(as.numeric(gsub("Chr", "", unique(plotting.table$Chromosome))))])
plotting.table$Chromosome
# plot the ideogram
graphic <- primary_ideogram(plotting.table, plot_title = "tester", chr_color = "orange", chr_size = 6,
tel_color = "grey5", tel_shape = 16, y_scale = 1e-6, y_scale_suffix = "Mb",
legend_pos = "bottom", legend_size = 0.25)
graphic
library(data.table)
library(tidyverse)
library(scales)
library(Biostrings)
library(pbapply)
library(devtools) # Make sure that the devtools library is loaded
install_github("matthewwdavis/ggideo")
library(ggideo)
ggideoprimary("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
library(data.table)
library(tidyverse)
library(scales)
library(Biostrings)
library(pbapply)
library(devtools) # Make sure that the devtools library is loaded
install_github("matthewwdavis/ggideo")
library(ggideo)
ggideoprimary("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
genome <- readDNAStringSet("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
genome <- readDNAStringSet("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = 1e6, tel_start = "CCCTAAA", tel_end = "TTTAGGG")
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(CCCTAAA_Counts >= 50 | TTTAGGG_Counts >= 50)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = "kerman", genome_size = genome.size)
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[order(as.numeric(gsub("Chr", "", unique(plotting.table$Chromosome))))])
# plot the ideogram
graphic <- primary_ideogram(plotting.table, plot_title = "tester", chr_color = "orange", chr_size = 6,
tel_color = "grey5", tel_shape = 16, y_scale = 1e-6, y_scale_suffix = "Mb",
legend_pos = "bottom", legend_size = 0.25)
View(graphic)
graphic
plot(graphic)
chr_string = "Chr"
chr_names = "Chr"
genome <- readDNAStringSet("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
length.table
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
length.table
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = 1e6, tel_start = "CCCTAAA", tel_end = "TTTAGGG")
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(CCCTAAA_Counts >= 50 | TTTAGGG_Counts >= 50)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = "kerman", genome_size = genome.size)
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table)
plotting.table
chr_names = "Chr"
genome <- readDNAStringSet("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = 1e6, tel_start = "CCCTAAA", tel_end = "TTTAGGG")
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(CCCTAAA_Counts >= 50 | TTTAGGG_Counts >= 50)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = "kerman", genome_size = genome.size)
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table, chr_string = chr_names)
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[order(as.numeric(gsub(chr_names, "", unique(plotting.table$Chromosome))))])
plotting.table$Chromosome
# plot the ideogram
graphic <- primary_ideogram(plotting.table, plot_title = "tester", chr_color = "orange", chr_size = 6,
tel_color = "grey5", tel_shape = 16, y_scale = 1e-6, y_scale_suffix = "Mb",
legend_pos = "bottom", legend_size = 0.25)
plot(graphic)
library(data.table)
library(tidyverse)
library(scales)
library(Biostrings)
library(pbapply)
library(devtools) # Make sure that the devtools library is loaded
install_github("matthewwdavis/ggideo")
library(ggideo)
ggideoprimary("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
getwd()
devtools::document()
library(ggideo)
ggideoprimary("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
devtools::install_github("matthewwdavis/ggideo")
getwd()
roxygen2::roxygenise()
roxygen2::roxygenise()
getwd()
roxygen2::roxygenise()
roxygen2::roxygenize()
devtools::install()
roxygen2::roxygenise()
devtools::install()
library(ggideo)
ggideoprimary("~/Desktop/Col-CEN_v1.2.fasta")
ggideoprimary("~/Desktop/Arabidopsis_thaliana.TAIR10.dna.toplevel.fa")
genome <- readDNAStringSet("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta", chr_names = "")
ggideoprimary("~/Desktop/Arabidopsis_thaliana.TAIR10.dna.toplevel.fa", chr_names = "")
ggideoprimary("~/Desktop/Arabidopsis_thaliana.TAIR10.dna.toplevel.fa", chr_names = "//d")
ggideoprimary("~/Desktop/Arabidopsis_thaliana.TAIR10.dna.toplevel.fa", chr_names = "\\d")
?ggideo
??ggideo
roxygen2::roxygenise()
devtools::install_github("matthewwdavis/ggideo")
library(ggideo)
ggideoprimary("~/Desktop/Arabidopsis_thaliana.TAIR10.dna.toplevel.fa", chr_names = "\\d")
devtools::install_github("matthewwdavis/ggideo")
library(ggideo)
## Need to work on removing trailing strings
ggideoprimary("~/Desktop/Arabidopsis_thaliana.TAIR10.dna.toplevel.fa", chr_names = "\\d")
devtools::install_github("matthewwdavis/ggideo")
library(ggideo)
## Need to work on removing trailing strings
ggideoprimary("~/Desktop/Arabidopsis_thaliana.TAIR10.dna.toplevel.fa", chr_names = "\\d")
devtools::install_github("matthewwdavis/ggideo")
library(ggideo)
## Need to work on removing trailing strings
ggideoprimary("~/Desktop/Arabidopsis_thaliana.TAIR10.dna.toplevel.fa", chr_names = "\\d")
ggideoprimary("~/Desktop/Arabidopsis_thaliana.TAIR10.dna.toplevel.fa", chr_names = "")
devtools::install_github("matthewwdavis/ggideo")
library(ggideo)
## Need to work on removing trailing strings
ggideoprimary("~/Desktop/Arabidopsis_thaliana.TAIR10.dna.toplevel.fa", chr_names = "")
devtools::install_github("matthewwdavis/ggideo")
library(ggideo)
## Need to work on removing trailing strings
ggideoprimary("~/Desktop/Arabidopsis_thaliana.TAIR10.dna.toplevel.fa", chr_names = "")
#'   end_telo_end = c(100000000, 200000000),
#'   begin_telo_bp = c(5000000, 10000000),
#'   end_telo_bp = c(5000000, 10000000)
#' )
#' primary_ideogram(genome.table)
#'
#' @importFrom ggplot2 ggplot filter aes geom_segment geom_point labs theme_classic theme element_text scale_y_continuous
#' @importFrom scales label_number
#'
#' @export
primary_ideogram <- function(genome.table, plot_title = NULL, x_axis_title = NULL, y_axis_title = "Chromosome Length",
legend_title = "Telomere Length", chr_color = "dodgerblue2", chr_size = 8,
tel_color = "black", tel_shape = 16, y_scale = 1e-6, y_scale_suffix = "Mb",
legend_pos = "bottom", legend_size = 0.25) {
p <- genome.table %>%
filter(begin_telo_bp != 0 & end_telo_bp != 0) %>%
ggplot(aes(x = Chromosome, y = Length)) +
geom_segment(aes(y = begin_telo_start, yend = Length),
color = chr_color,
linewidth = chr_size,
lineend = "round") +
geom_point(aes(x = Chromosome, y = begin_telo_end, size = begin_telo_bp),
shape = tel_shape,
color = tel_color) +
geom_point(aes(x = Chromosome, y = end_telo_end, size = end_telo_bp),
shape = tel_shape,
color = tel_color) +
scale_y_continuous(labels = label_number(scale = y_scale, suffix = y_scale_suffix)) +
labs(y = y_axis_title, x = x_axis_title, size = legend_title, title = plot_title) +
theme_classic(base_size = 6) +
theme(legend.position = legend_pos,
legend.key.size = unit(legend_size, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold"))
return(p)
}
# List all R script files in the folder
files <- list.files("~/Projects/ggideo/R/", pattern = "\\.R$", full.names = TRUE)
# Source each file
sapply(files, source)
chr_names = "Chr"
genome <- readDNAStringSet("~/Desktop/Pvera_Kerman_RefGen_v1_15Chr.fasta")
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = 1e6, tel_start = "CCCTAAA", tel_end = "TTTAGGG")
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(CCCTAAA_Counts >= 50 | TTTAGGG_Counts >= 50)
tel.table
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(CCCTAAA_Counts >= 50 | TTTAGGG_Counts >= 50)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = "kerman", genome_size = genome.size)
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table, chr_string = chr_names)
plotting.table
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[order(as.numeric(gsub(chr_names, "", unique(plotting.table$Chromosome))))])
View(plotting.table)
# plot the ideogram
graphic <- primary_ideogram(plotting.table, plot_title = "tester", chr_color = "orange", chr_size = 6,
tel_color = "grey5", tel_shape = 16, y_scale = 1e-6, y_scale_suffix = "Mb",
legend_pos = "bottom", legend_size = 0.25)
graphic
#'   end_telo_end = c(100000000, 200000000),
#'   begin_telo_bp = c(5000000, 10000000),
#'   end_telo_bp = c(5000000, 10000000)
#' )
#' primary_ideogram(genome.table)
#'
#' @importFrom ggplot2 ggplot filter aes geom_segment geom_point labs theme_classic theme element_text scale_y_continuous
#' @importFrom scales label_number
#'
#' @export
primary_ideogram <- function(genome.table, plot_title = NULL, x_axis_title = NULL, y_axis_title = "Chromosome Length",
legend_title = "Telomere Length", chr_color = "dodgerblue2", chr_size = 8,
tel_color = "black", tel_shape = 16, y_scale = 1e-6, y_scale_suffix = "Mb",
legend_pos = "bottom", legend_size = 0.25) {
p <- genome.table %>%
filter(begin_telo_bp != 0 | end_telo_bp != 0) %>%
ggplot(aes(x = Chromosome, y = Length)) +
geom_segment(aes(y = begin_telo_start, yend = Length),
color = chr_color,
linewidth = chr_size,
lineend = "round") +
geom_point(aes(x = Chromosome, y = begin_telo_end, size = begin_telo_bp),
shape = tel_shape,
color = tel_color) +
geom_point(aes(x = Chromosome, y = end_telo_end, size = end_telo_bp),
shape = tel_shape,
color = tel_color) +
scale_y_continuous(labels = label_number(scale = y_scale, suffix = y_scale_suffix)) +
labs(y = y_axis_title, x = x_axis_title, size = legend_title, title = plot_title) +
theme_classic(base_size = 6) +
theme(legend.position = legend_pos,
legend.key.size = unit(legend_size, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold"))
return(p)
}
# plot the ideogram
graphic <- primary_ideogram(plotting.table, plot_title = "tester", chr_color = "orange", chr_size = 6,
tel_color = "grey5", tel_shape = 16, y_scale = 1e-6, y_scale_suffix = "Mb",
legend_pos = "bottom", legend_size = 0.25)
plot(graphic)
#'   end_telo_end = c(100000000, 200000000),
#'   begin_telo_bp = c(5000000, 10000000),
#'   end_telo_bp = c(5000000, 10000000)
#' )
#' primary_ideogram(genome.table)
#'
#' @importFrom ggplot2 ggplot filter aes geom_segment geom_point labs theme_classic theme element_text scale_y_continuous
#' @importFrom scales label_number
#'
#' @export
primary_ideogram <- function(genome.table, plot_title = NULL, x_axis_title = NULL, y_axis_title = "Chromosome Length",
legend_title = "Telomere Length", chr_color = "dodgerblue2", chr_size = 8,
tel_color = "black", tel_shape = 16, y_scale = 1e-6, y_scale_suffix = "Mb",
legend_pos = "bottom", legend_size = 0.25) {
p <- genome.table %>%
ggplot(aes(x = Chromosome, y = Length)) +
geom_segment(aes(y = begin_telo_start, yend = Length),
color = chr_color,
linewidth = chr_size,
lineend = "round") +
geom_point(aes(x = Chromosome, y = begin_telo_end, size = ifelse(begin_telo_bp == 0, NA, begin_telo_bp)),
shape = tel_shape,
color = tel_color) +
geom_point(aes(x = Chromosome, y = end_telo_end, size = ifelse(end_telo_bp == 0, NA, end_telo_bp)),
shape = tel_shape,
color = tel_color) +
scale_y_continuous(labels = label_number(scale = y_scale, suffix = y_scale_suffix)) +
labs(y = y_axis_title, x = x_axis_title, size = legend_title, title = plot_title) +
theme_classic(base_size = 6) +
theme(legend.position = legend_pos,
legend.key.size = unit(legend_size, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold"))
return(p)
}
# plot the ideogram
graphic <- primary_ideogram(plotting.table, plot_title = "tester", chr_color = "orange", chr_size = 6,
tel_color = "grey5", tel_shape = 16, y_scale = 1e-6, y_scale_suffix = "Mb",
legend_pos = "bottom", legend_size = 0.25)
graphic
roxygen2::roxygenize()
roxygen2::roxygenize()
rm(list = c("count_sequence", "create_windows", "genome_table", "ggideoprimary", "primary_ideogram", "remove_lead_0s", "remove_trailing", "rename_chr",
"select_chr", "telomere_repeat_number"))
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::install_github("matthewwdavis/ggideo")
library(ggideo)
## Need to work on removing trailing strings
ggideoprimary("~/Desktop/Arabidopsis_thaliana.TAIR10.dna.toplevel.fa", chr_names = "")
library(ggideo)
ggideoprimary("~/Projects/Streptanthus/Genome_Assembly/Inputs/Assemblies/S.div.fasta")
ggsave("~/Desktop/strep_test.pdf", height = 3, width = 4)
devtools::document()
roxygen2::roxygenise()
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
devtools::install_github("matthewwdavis/ggnomics")
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
devtools::install_github("matthewwdavis/ggnomics")
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
devtools::install_github("matthewwdavis/ggnomics")
knitr::opts_chunk$set(echo = TRUE)
library(ggnomics)
roxygen2::roxygenise()
devtools::document()
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
devtools::install_github("matthewwdavis/ggnomics")
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
devtools::install_github("matthewwdavis/ggnomics")
library(ggnomics)
ggideo_diploid("~/Desktop/alfalfa/Genomes/dca1_hap1_ragtag.fasta", "~/Desktop/alfalfa/Genomes/dca1_hap2_ragtag.fasta")
roxygen2::roxygenise()
devtools::document()
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
devtools::install_github("matthewwdavis/ggnomics")
library(ggnomics)
ggideo_diploid("~/Desktop/alfalfa/Genomes/dca1_hap1_ragtag.fasta", "~/Desktop/alfalfa/Genomes/dca1_hap2_ragtag.fasta")
ggideo("~/Desktop/alfalfa/Genomes/dca1_primary_ragtag.fasta", color_chr = "mediumpurple1")
ggideo_diploid("~/Desktop/alfalfa/Genomes/dca1_hap1_ragtag.fasta",
"~/Desktop/alfalfa/Genomes/dca1_hap2_ragtag.fasta")
ggideo("~/Desktop/alfalfa/Genomes/dfl2a_primary_ragtag.fasta", color_chr = "lightgoldenrod1")
ggideo_diploid("~/Desktop/alfalfa/Genomes/dfl2a_hap1_ragtag.fasta",
"~/Desktop/alfalfa/Genomes/dfl2a_hap2_ragtag.fasta")
ggideo("~/Desktop/alfalfa/Genomes/dca1_primary_ragtag.fasta",
color_chr = "mediumpurple1", color_tel = "darkorchid")
ggideo_diploid("~/Desktop/alfalfa/Genomes/dca1_hap1_ragtag.fasta",
"~/Desktop/alfalfa/Genomes/dca1_hap2_ragtag.fasta",
color_hap1 = "mediumorchid1", color_hap2 = "mediumorchid4", color_tel = "grey")
ggideo("~/Desktop/alfalfa/Genomes/dfl2a_primary_ragtag.fasta",
color_chr = "lightgoldenrod1",color_tel = "goldenrod")
ggideo_diploid("~/Desktop/alfalfa/Genomes/dfl2a_hap1_ragtag.fasta",
"~/Desktop/alfalfa/Genomes/dfl2a_hap2_ragtag.fasta",
color_hap1 = "khaki1", color_hap2 = "khaki3", color_tel = "grey")
ggideo("~/Desktop/alfalfa/Genomes/dca1_primary_ragtag.fasta",
color_chr = "mediumpurple1", color_tel = "darkorchid")
ggideo_diploid("~/Desktop/alfalfa/Genomes/dca1_hap1_ragtag.fasta",
"~/Desktop/alfalfa/Genomes/dca1_hap2_ragtag.fasta",
color_hap1 = "mediumorchid1", color_hap2 = "mediumorchid4",
color_tel = "darkorchid")
ggideo("~/Desktop/alfalfa/Genomes/dfl2a_primary_ragtag.fasta",
color_chr = "lightgoldenrod1",color_tel = "goldenrod")
ggideo_diploid("~/Desktop/alfalfa/Genomes/dfl2a_hap1_ragtag.fasta",
"~/Desktop/alfalfa/Genomes/dfl2a_hap2_ragtag.fasta",
color_hap1 = "khaki1", color_hap2 = "khaki2", color_tel = "goldenrod")
dca1.pri <- ggideo("~/Desktop/alfalfa/Genomes/dca1_primary_ragtag.fasta",
color_chr = "mediumpurple1", color_tel = "darkorchid")
dca1.hap <- ggideo_diploid("~/Desktop/alfalfa/Genomes/dca1_hap1_ragtag.fasta",
"~/Desktop/alfalfa/Genomes/dca1_hap2_ragtag.fasta",
color_hap1 = "mediumorchid1", color_hap2 = "mediumorchid3",
color_tel = "purple4")
dfl2a.pri <- ggideo("~/Desktop/alfalfa/Genomes/dfl2a_primary_ragtag.fasta",
color_chr = "lightgoldenrod1",color_tel = "goldenrod")
dfl2a.hap <- ggideo_diploid("~/Desktop/alfalfa/Genomes/dfl2a_hap1_ragtag.fasta",
"~/Desktop/alfalfa/Genomes/dfl2a_hap2_ragtag.fasta",
color_hap1 = "khaki1", color_hap2 = "khaki2", color_tel = "darkgoldenrod")
dca1.hap$ideogram
dca1.pri$ideogram
dfl2a.pri$ideogram
dfl2a.hap$ideogram
dca1.hap$genomic.table
dca1.hap$genomic.table %>%
unique(Chromosome)
dca1.hap$genomic.table
knitr::opts_chunk$set(echo = TRUE)
library(ggnomics)
dca1.pri <- ggideo("~/Desktop/alfalfa/Genomes/dca1_primary_ragtag.fasta",
color_chr = "mediumpurple1", color_tel = "darkorchid")
dca1.hap <- ggideo_diploid("~/Desktop/alfalfa/Genomes/dca1_hap1_ragtag.fasta",
"~/Desktop/alfalfa/Genomes/dca1_hap2_ragtag.fasta",
color_hap1 = "mediumorchid1", color_hap2 = "mediumorchid3",
color_tel = "purple4")
dfl2a.pri <- ggideo("~/Desktop/alfalfa/Genomes/dfl2a_primary_ragtag.fasta",
color_chr = "lightgoldenrod1",color_tel = "goldenrod")
dfl2a.hap <- ggideo_diploid("~/Desktop/alfalfa/Genomes/dfl2a_hap1_ragtag.fasta",
"~/Desktop/alfalfa/Genomes/dfl2a_hap2_ragtag.fasta",
color_hap1 = "khaki1", color_hap2 = "khaki2", color_tel = "darkgoldenrod")
dca1.hap$ideogram
dca1.pri$ideogram
dfl2a.pri$ideogram
dfl2a.hap$ideogram
dca1.hap$genomic.table %>%
dca1.pri$ideogram
str(dca1.hap$genomic.table)
dca1.hap$genomic.table %>%
distinct(Chromosome)
dca1.hap$genomic.table %>%
distinct(Chromosome, .keep_all = TRUE)
dca1.hap$genomic.table %>%
distinct(Chromosome, .keep_all = TRUE) %>%
sum(Length)
dca1.hap$genomic.table %>%
distinct(Chromosome, .keep_all = TRUE) %>%
summarise(total_length = sum(Length))
dfl2a.pri$genomic.table %>%
distinct(Chromosome, .keep_all = TRUE) %>%
summarise(total_length = sum(Length))
dca1.hap$genomic.table
dca1.hap$genomic.table %>%
distinct(Chromosome, .keep_all = TRUE) %>%
group_by(Hap)
dca1.hap$genomic.table %>%
distinct(Chromosome, .keep_all = TRUE) %>%
group_by(Hap) %>%
summarise(total_length = sum(Length))
dca1.hap$genomic.table
dca1.hap$genomic.table %>%
group_by(Hap) %>%
distinct(Chromosome, .keep_all = TRUE) %>%
summarise(total_length = sum(Length))
dca1.hap$genomic.table %>%
group_by(Hap) %>%
distinct(Chromosome, .keep_all = TRUE) %>%
summarise(total_length = sum(Length))
dca1.pri$genomic.table %>%
distinct(Chromosome, .keep_all = TRUE) %>%
summarise(total_length = sum(Length))
dfl2a.pri$genomic.table %>%
distinct(Chromosome, .keep_all = TRUE) %>%
summarise(total_length = sum(Length))
dfl2a.hap$genomic.table %>%
group_by(Hap) %>%
distinct(Chromosome, .keep_all = TRUE) %>%
summarise(total_length = sum(Length))
dca1.pri$ideogram
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
devtools::install_github("matthewwdavis/ggnomics")
library(ggnomics)
dca1.pri
dca1.hap$ideogram
dca1.hap$ideogram +
theme_void()
devtools::document()
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
devtools::install_github("matthewwdavis/ggnomics")
ggideo("~/Desktop/alfalfa/Genomes/2260_combohap_ragtag.fasta")
ggideo("~/Desktop/alfalfa/Genomes/2261-1_combohap_ragtag.fasta")
ggideo("~/Desktop/alfalfa/Genomes/2261-3_combohap_ragtag.fasta")
ggideo("~/Desktop/alfalfa/Genomes/2262-2_combohap_ragtag.fasta")
ggideo("~/Desktop/alfalfa/Genomes/2263-3_combohap_ragtag.fasta")
ggideo("~/Desktop/alfalfa/Genomes/2266-15b_combohap_ragtag.fasta")
ggideo("~/Desktop/alfalfa/Genomes/22665-1_combohap_ragtag.fasta")
remove_string_chr <- function(data, remove_string =  "_RagTag"){
data$Chromosome <- sub(remove_string, "", data$Chromosome)
}
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
devtools::install_github("matthewwdavis/ggnomics")
library(ggnomics)
ggideo_diploid(combined_hap_fasta = "~/Desktop/alfalfa/Genomes/2261-1_combohap_ragtag.fasta") # Worked well
roxygen2::roxygenise()
devtools::develop()
devtools::document()
rm(list = c("remove_string_chr"))
devtools::document()
roxygen2::roxygenise()
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
devtools::install_github("matthewwdavis/ggnomics")
library(ggnomics)
ggideo_diploid(combined_hap_fasta = "~/Desktop/alfalfa/Genomes/2261-1_combohap_ragtag.fasta") # Worked well
