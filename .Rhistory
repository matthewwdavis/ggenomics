unique(plotting.table$Chromosome))
))
])
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome)
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(Forward_Counts >= 25 | Reverse_Counts >= 25)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = NULL, genome_size = genome.size)
# Remove string from names
plotting.table$Chromosome <- remove_string_chr(plotting.table, remove_string = "_RagTag")
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table, chr_string = chr_names)
# Remove trailing strings. These is defined by a space
plotting.table <- remove_trailing(plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[
order(as.numeric(
ifelse(nchar(unique(plotting.table$Chromosome)) > 1,
gsub(chr_names, "", unique(plotting.table$Chromosome)),
unique(plotting.table$Chromosome))
))
])
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome)
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(Forward_Counts >= 25 | Reverse_Counts >= 25)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = NULL, genome_size = genome.size)
# Remove string from names
plotting.table$Chromosome <- remove_string_chr(plotting.table, remove_string = "_RagTag")
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table, chr_string = chr_names)
# Remove trailing strings. These is defined by a space
plotting.table <- remove_trailing(plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[
order(as.numeric(gsub("^(\\d{2})(.*)", "\\1",
unique(plotting.table$Chromosome))))
])
# Set levels so that chromosomes are plotted in the proper order by number
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[
order(as.numeric(sapply(unique(plotting.table$Chromosome), function(x) {
if (grepl("^\\d+$", x)) {
return(x)  # Leave numeric chromosomes as is
} else {
return(gsub(" .*", "", x))  # Apply gsub to non-numeric chromosomes
}
})))
])
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome)
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(Forward_Counts >= 25 | Reverse_Counts >= 25)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = NULL, genome_size = genome.size)
# Remove string from names
plotting.table$Chromosome <- remove_string_chr(plotting.table, remove_string = "_RagTag")
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table, chr_string = chr_names)
# Remove trailing strings. These is defined by a space
plotting.table <- remove_trailing(plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[order(as.numeric(gsub(chr_names, "", unique(plotting.table$Chromosome))))])
# Set levels so that chromosomes are plotted in the proper order by number
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[
order(as.numeric(sapply(unique(plotting.table$Chromosome), function(x) {
if (grepl("^\\d+$", x)) {
return(x)  # Leave numeric chromosomes as is
} else {
return(gsub(" .*", "", x))  # Apply gsub to non-numeric chromosomes
}
})))
])
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome)
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(Forward_Counts >= 25 | Reverse_Counts >= 25)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = NULL, genome_size = genome.size)
# Remove string from names
plotting.table$Chromosome <- remove_string_chr(plotting.table, remove_string = "_RagTag")
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table, chr_string = chr_names)
# Remove trailing strings. These is defined by a space
plotting.table <- remove_trailing(plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[order(as.numeric(gsub(chr_names, "", unique(plotting.table$Chromosome))))])
# Set levels so that chromosomes are plotted in the proper order by number
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[
order(sapply(unique(plotting.table$Chromosome), function(x) {
# If the chromosome value is purely numeric, keep it as is
if (grepl("^\\d+$", x)) {
return(as.numeric(x))  # Convert numeric strings to numbers
} else {
# For non-numeric chromosomes, remove everything after the space
return(as.character(gsub(" .*", "", x)))
}
}))
])
plotting.table
telomere_plotting_table <- function(genome, chr_names = "Chr", string_remove = "_RagTag", tel_start_seq = "CCCTAAA", tel_end_seq = "TTTAGGG",
size_windows = 1e6, min_tel_count = 25, sample_name = NULL){
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome, window = size_windows, tel_start = tel_start_seq, tel_end = tel_end_seq)
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(Forward_Counts >= min_tel_count | Reverse_Counts >= min_tel_count)
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = sample_name, genome_size = genome.size)
# Remove string from names
plotting.table$Chromosome <- remove_string_chr(plotting.table, remove_string = string_remove)
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table, chr_string = chr_names)
# Remove trailing strings. These is defined by a space
plotting.table <- remove_trailing(plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[
order(sapply(unique(plotting.table$Chromosome), function(x) {
# If the chromosome value is purely numeric, keep it as is
if (grepl("^\\d+$", x)) {
return(as.numeric(x))  # Convert numeric strings to numbers
} else {
# For non-numeric chromosomes, remove everything after the space
return(as.character(gsub(" .*", "", x)))
}
}))
])
return(plotting.table)
}
genome <- ggread_fasta("./arabidopsis_tair10.fasta.gz")
tel_data <- telomere_plotting_table(genome, chr_names = "\\d")
ggnom(tel_data, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot()
ggideo("./arabidopsis_tair10.fasta.gz", chr_names = "\\d")
devtools::install_github("matthewwdavis/ggnomics")
library(ggnomics)
## Test new structure
genome <- ggread_fasta("./arabidopsis_tair10.fasta.gz")
tel_data <- telomere_plotting_table(genome, chr_names = "\\d")
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
devtools::install_github("matthewwdavis/ggnomics")
library(ggnomics)
## Test new structure
genome <- ggread_fasta("./arabidopsis_tair10.fasta.gz")
tel_data <- telomere_plotting_table(genome, chr_names = "\\d")
ggnom(tel_data, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot()
ggideo("./arabidopsis_tair10.fasta.gz", chr_names = "\\d")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
devtools::install_github("matthewwdavis/ggnomics")
devtools::install_github("matthewwdavis/ggnomics")
library(ggnomics)
## Test new structure
genome <- ggread_fasta("./arabidopsis_tair10.fasta.gz")
tel_data <- telomere_plotting_table(genome, chr_names = "\\d")
ggnom(tel_data, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot()
ggideo("./arabidopsis_tair10.fasta.gz", chr_names = "\\d")
ggideo_diploid("./genome_hap1.fasta.gz", "./genome_hap2.fasta.gz")
#'   begin_telo_bp = c(5000000, 10000000),
#'   end_telo_bp = c(5000000, 10000000)
#' )
#' ideogram_diploid(genome.table)
#'
#' @importFrom ggplot2 ggplot aes geom_segment geom_point labs theme_classic theme element_text scale_y_continuous
#' @importFrom scales label_number
#' @importFrom dplyr filter
#'
#' @export
ideogram_diploid <- function(genome.table, plot_title = NULL, x_axis_title = NULL, y_axis_title = "Chromosome Length",
legend_title = "Telomere Size (bp)", hap1_name = "Haplotype 1", hap2_name = "Haplotype 2",
hap1_color = "dodgerblue2", hap2_color = "orangered", chr_size = 6, chr_distance = 0.7,
tel_color = "black", tel_shape = 16, y_scale = 1e-6, y_scale_suffix = "Mb",
legend_chr_size = 3, legend_pos = "right", legend_size = 0.25, text_size = 6) {
# Plot the two haplotypes
p <- genome.table %>%
ggplot(aes(x = as.factor(Chromosome), y = Length)) +
geom_segment(aes(y = begin_telo_start, yend = Length, color = Hap),
position = position_dodge(width = chr_distance),  # Use calculated dodge width
size = chr_size,
lineend = "round") +
geom_point(aes(x = Chromosome, y = begin_telo_end,
size = ifelse(begin_telo_bp == 0, NA, begin_telo_bp),
fill = Hap),
shape = tel_shape, color = tel_color, position = position_dodge(width = chr_distance),
na.rm = TRUE) +
geom_point(aes(x = Chromosome, y = end_telo_end,
size = ifelse(end_telo_bp == 0, NA, end_telo_bp),
fill = Hap),
shape = tel_shape, color = tel_color, position = position_dodge(width = chr_distance),
na.rm = TRUE) +
scale_color_manual(name = "Haplotype",
values = c(hap1 = hap1_color, hap2 = hap2_color),
labels = c(hap1 = hap1_name, hap2 = hap2_name)) +
scale_y_continuous(
labels = label_number(scale = y_scale, suffix = y_scale_suffix)) +
labs(y = y_axis_title, x = x_axis_title, size = legend_title) +
guides(color = guide_legend(title = NULL, override.aes = list(linewidth = legend_chr_size)),
size = guide_legend(title = legend_title),
fill = "none") +
theme_classic(base_size = text_size) +
theme(legend.position = legend_pos,
legend.key.size = unit(legend_size, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold"))
return(p)
}
ggideo_diploid("./genome_hap1.fasta.gz", "./genome_hap2.fasta.gz")
devtools::install_github("matthewwdavis/ggnomics")
library(ggnomics)
## Test new structure
genome <- ggread_fasta("./arabidopsis_tair10.fasta.gz")
tel_data <- telomere_plotting_table(genome, chr_names = "\\d")
ggnom(tel_data, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot()
ggideo("./arabidopsis_tair10.fasta.gz", chr_names = "\\d")
ggideo_diploid("./genome_hap1.fasta.gz", "./genome_hap2.fasta.gz")
knitr::opts_chunk$set(echo = TRUE)
library(ggnomics)
# Generate the data and the plot, stored as a list
genome.plot <- ggideo("./arabidopsis_tair10.fasta.gz", chr_names = "\\d")
# Print the plot
genome.plot$ideogram
# Print the resulting table
genome.plot$genomic.table
library(ggnomics)
# Generate the data and the plot, stored as a list
genome.plot <- ggideo_diploid("./genome_hap1.fasta.gz", "./genome_hap2.fasta.gz")
# Print the resulting table
genome.plot$genomic.table
# Print the plot
genome.plot$ideogram
library(ggnomics)
# Generate the data and the plot, stored as a list
genome.plot <- ggideo_diploid("./genome_combohap.fasta.gz")
library(ggnomics)
# Generate the data and the plot, stored as a list
genome.plot <- ggideo_diploid(combined_hap_fasta = "./genome_combohap.fasta.gz")
# Print the resulting table
genome.plot$genomic.table
# Print the plot
genome.plot$ideogram
roxygen2::roxygenise()
devtools::document()
devtools::install_github("matthewwdavis/ggnomics")
knitr::opts_chunk$set(echo = TRUE)
library(ggnomics)
# Generate the data and the plot, stored as a list
genome.plot <- ggideo_diploid(combined_hap_fasta = "./genome_combohap.fasta.gz")
# Print the resulting table
genome.plot$genomic.table
# Print the plot
genome.plot$ideogram
library(ggnomics)
# Generate the data and the plot, stored as a list
genome.plot <- ggideo_diploid(combined_hap_fasta = "./genome_combohap.fasta.gz",
string_remove = "_hap\\d_RagTag")
# Print the resulting table
genome.plot$genomic.table
# Print the plot
genome.plot$ideogram
rmarkdown::render("README.Rmd", output_format = "github_document")
genome <- ggread_fasta("./arabidopsis_tair10.fasta.gz")
genome <- ggread_fasta("./arabidopsis_tair10.fasta.gz")
telo.table <- telomere_plotting_table(genome)
telo.table
telo.table <- telomere_plotting_table(genome, chr_names = "\\d")
telo.table
telo.table <- telomere_plotting_table(genome, chr_names = "^\\d")
telo.table
# Create table of contigs, chromosomes, and lengths
length.table <- data.table(Chromosome = names(genome), Length = width(genome))
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = chr_names)
## Test new structure
genome <- ggread_fasta("./arabidopsis_tair10.fasta.gz")
# Filter for only chromosomes, based on starting string
length.table <- select_chr(length.table, chr_string = "^\\d")
# Extract the size of the genome
genome.size <- sum(length.table$Length)
# Count telomeric sequence repeat
tel_count.table <- telomere_repeat_number(fasta = genome)
tel_count.table
View(tel_count.table)
# Filter to maintain telomeric counts over a certain threshold
tel.table <- tel_count.table %>%
filter(Forward_Counts >= 25 | Reverse_Counts >= 25)
tel.table
# Create the larger table necessary for plotting
plotting.table <- genome_table(length.table, tel.table, name = NULL, genome_size = genome.size)
plotting.table
# Remove string from names
plotting.table$Chromosome <- remove_string_chr(plotting.table, remove_string = "_RagTag")
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table, chr_string = chr_names)
# Remove trailing strings. These is defined by a space
plotting.table <- remove_trailing(plotting.table)
# Remove leading 0s for proper ordering and plotting
plotting.table <- remove_lead_0s(plotting.table, chr_string = "^\\d")
# Remove trailing strings. These is defined by a space
plotting.table <- remove_trailing(plotting.table)
# Set levels so that chromosomes are plotted in the proper order by number
# Set levels so that chromosomes are plotted in the proper order by number
plotting.table$Chromosome <- factor(plotting.table$Chromosome,
levels = unique(plotting.table$Chromosome)[
order(sapply(unique(plotting.table$Chromosome), function(x) {
# If the chromosome value is purely numeric, keep it as is
if (grepl("^\\d+$", x)) {
return(as.numeric(x))  # Convert numeric strings to numbers
} else {
# For non-numeric chromosomes, remove everything after the space
return(as.character(gsub(" .*", "", x)))
}
}))
])
plotting.table
class(telo.table)
ggnom(telo.table) +
geom_telplot()
ggnom(telo.table, aes(aes(x = Chromosome, y = begin_telo_start, yend = Length))) +
geom_telplot()
ggnom(telo.table, aes(aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot()
ggnom(telo.table, aes(aes(x = Chromosome, y = begin_telo_start, yend = Length))) +
geom_telplot()
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot()
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot()
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot()
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "darkseagreen", tel_color = "")
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "darkseagreen1", tel_color = "darkseagreen")
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "darkseagreen2", tel_color = "darkseagreen4")
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "darkseagreen2", tel_color = "darkseagreen4", tel_shape = 4)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "darkseagreen2", tel_color = "darkseagreen4", tel_shape = 43)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "darkseagreen2", tel_color = "darkseagreen4", tel_shape = 3)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "darkseagreen2", tel_color = "darkseagreen4", tel_shape = 1)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "darkseagreen2", tel_color = "darkseagreen4", tel_shape = 2)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "darkseagreen2", tel_color = "darkseagreen4", tel_shape = 3)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "darkseagreen2", tel_color = "darkseagreen4", tel_shape = 4)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "darkseagreen2", tel_color = "darkseagreen4", tel_shape = 5)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "darkseagreen2", tel_color = "darkseagreen4", tel_shape = 6)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "darkseagreen2", tel_color = "darkseagreen4", tel_shape = 5)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "darkseagreen3", tel_color = "darkseagreen4", tel_shape = 5)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "darkslategray1", tel_color = "darkseagreen4", tel_shape = 5)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "darkslategray2", tel_color = "darkseagreen4", tel_shape = 5)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "darkslategray3", tel_color = "darkseagreen4", tel_shape = 5)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "darkslategray3", tel_color = "darkseagreen1", tel_shape = 5)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "deepskyblue", tel_color = "darkseagreen1", tel_shape = 5)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "deepskyblue", tel_color = "darkgreen", tel_shape = 5)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "lightblue", tel_color = "darkgreen", tel_shape = 5)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "lightblue", tel_color = "darkgreen", tel_shape = 21)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "lightblue", tel_color = "darkgreen", tel_shape = 18)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "cornflowerblue", tel_color = "darkgreen", tel_shape = 18)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "azure", tel_color = "darkgreen", tel_shape = 18)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "azure2", tel_color = "darkgreen", tel_shape = 18)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "bisque", tel_color = "darkgreen", tel_shape = 18)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "bisque", tel_color = "darkgreen", tel_shape = 18) +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "Mb")) +
labs(y = "Length", x = "Chromosome", size = "Telomere Size", title = "ggnomics Telomere Plot") +
theme_classic(base_size = text_size) +
theme(legend.position = "bottom",
legend.key.size = unit(0.2, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold"))
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "bisque", tel_color = "darkgreen", tel_shape = 18) +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "Mb")) +
labs(y = "Length", x = "Chromosome", size = "Telomere Size", title = "ggnomics Telomere Plot") +
theme_classic(base_size = 6) +
theme(legend.position = "bottom",
legend.key.size = unit(0.2, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold"))
knitr::opts_chunk$set(echo = TRUE)
genome <- ggread_fasta("./arabidopsis_tair10.fasta.gz")
telo.table <- telomere_plotting_table(genome, chr_names = "^\\d")
# "^\\d" is used here to specify that the chromosome names begin with a number, as we are not interested in plotting the plasmid genomes.
print(telo.table)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot()
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "bisque", tel_color = "darkgreen", tel_shape = 18)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "bisque", tel_color = "darkgreen", tel_shape = 18) +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "Mb")) +
labs(y = "Sequence Length", x = "Chromosome", size = "Telomere Size", title = "ggnomics Telomere Plot") +
theme_classic(base_size = 6) +
theme(legend.position = "bottom",
legend.key.size = unit(0.2, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold"))
library(ggnomics)
# Generate the data and the plot, stored as a list
genome.plot <- ggideo("./arabidopsis_tair10.fasta.gz", chr_names = "\\d")
# Print the plot
genome.plot$ideogram
# Print the resulting table
genome.plot$genomic.table
library(ggnomics)
# Generate the data and the plot, stored as a list
genome.plot <- ggideo_diploid("./genome_hap1.fasta.gz", "./genome_hap2.fasta.gz")
# Print the resulting table
genome.plot$genomic.table
# Print the plot
genome.plot$ideogram
library(ggnomics)
# Generate the data and the plot, stored as a list
genome.plot <- ggideo_diploid(combined_hap_fasta = "./genome_combohap.fasta.gz",
string_remove = "_hap\\d_RagTag")
# Print the resulting table
genome.plot$genomic.table
# Print the plot
genome.plot$ideogram
rmarkdown::render("README.Rmd", output_format = "github_document")
roxygen2::roxygenise()
devtools::document()
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "bisque2", tel_color = "darkgreen", tel_shape = 18)
library(ggnomics)
genome <- ggread_fasta("./arabidopsis_tair10.fasta.gz")
print(telo.table)
telo.table <- telomere_plotting_table(genome, chr_names = "^\\d")
print(telo.table)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot()
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "bisque2", tel_color = "darkgreen", tel_shape = 18)
ggnom(telo.table, aes(x = Chromosome, y = begin_telo_start, yend = Length)) +
geom_telplot(chr_color = "bisque2", tel_color = "darkgreen", tel_shape = 18) +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "Mb")) +
labs(y = "Sequence Length", x = "Chromosome", size = "Telomere Size", title = "ggnomics Telomere Plot") +
theme_classic(base_size = 6) +
theme(legend.position = "bottom",
legend.key.size = unit(0.2, "cm"),
plot.title = element_text(hjust = 0.5, face = "bold"))
